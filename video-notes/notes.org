#+TITLE: Notes On Tech Videos I Have watched
#+STARTUP: indent
#+OPTIONS: ^:nil
[[./notes.html][HTML Export]]


* Read a Paper Series
** End To End Argument In System Design			      :system_design:
   - https://www.youtube.com/watch?v=dE699lHDW7I&t=1s
   - https://dl.acm.org/citation.cfm?doid=357401.357402
   - Presents a design principle that guides placement of functions among modules of a distributed computer system.
   - Functions placed at lower level of system may be of little value compared to the cost of providing them.
   - Functions should be placed at ends of the system.
   - e.g. for a file transfer system, ensuring correctness in each module vs ensuring correctness at the ends by taking
    hash and comparing them. With the former there is a chance of error even if individual modules guanrantee 99.9%
    correctness; whereas, in the later there is no chance of error.
** Criteria For Decomposing Systems In Modules :system_design:software_engineering:
   - https://www.youtube.com/watch?v=NF5tRQb0Dpc
   - https://dl.acm.org/citation.cfm?doid=361598.361623
   - Follow data abstraction and information hiding principle in design.
   - Decomposition before code is written
   - Start with what are the assumptions.
   - Then reason about what assumptions are going to change.
   - Decomposition of a system into modules based on flow chart of implementation for application is always an incorrect
     choice.
   - Decomposition should be based on the design decisions that are likely to change. Each module is then designed to
     hide such a design decision from others.
   - Since design decisions transcend the time of execution, modules will not correspond to steps in processing.
** Programming with Abstract Data Types
- https://www.youtube.com/watch?v=w2PmXJL8_WM&list=PLOuhQnxVenf1AI66Ji4K_4I-ItmVLQKym&index=6
- https://dl.acm.org/doi/10.1145/800233.807045
- Definition : abstraction is a mechanism that permits expression of relevant details and suppression of irrelevant
  details. 
- Operator clusters with data.
- build the system One decision at a time so you can reason correctness of an abstraction. I.e. first you prove that the
  usage of abstraction is correct and then you prove be that representation of the abstraction is correct.
- use information hiding as a principle for programming
** Information Distribution Aspects of Design Methodology
- https://www.youtube.com/watch?v=brINBB91TK4&list=PLOuhQnxVenf1AI66Ji4K_4I-ItmVLQKym&index=8
- https://www.researchgate.net/publication/221331713_Information_Distribution_Aspects_of_Design_Methodology
- Documentation and information sharing about a system also affects a system and it's design.
- he two main criteria of any system design are 1. We want to be able to make changes to system in future. 2. We want
  to be able to prove them correct.
- When you design an API, its callers don't just depend on the parameters and result data, they also depend on the
  assumptions they make about the API and its behavior. i.e. "connection" between modules are the assumptions modules
  make about each other. 
- making changes to system and proving them correct depends on what assumptions other callers have made about our
  system. 
- a clever programmer of client makes use of all the information they have, but a skilled programmer makes use of all
  the relevant information they have and ignore other information although it can be used. 
- and clever programs cause trouble later
- So it is better to restrict the information about internal data or implementation with the callers of the API. That
  way their assumptions are reduced which helps to change the internal implementation of API any time. 
- however, over time, as the number of users of API grows, all observable behavior of API is exposed and thus internal
  data and implementation becomes indirectly visible to callers. This can't be avoided. 
- note that early decisions in system are much harder to change than later decisions so take early decisions very carefully.
** The UNIX Time-Sharing System
- https://www.youtube.com/watch?v=P01T4G5I2lk&list=PLOuhQnxVenf1AI66Ji4K_4I-ItmVLQKym&index=2
- https://people.eecs.berkeley.edu/~brewer/cs262/unix.pdf
- File System
  - Doesn't expect any special structure within file, it is just a stream of bytes.
  - Directories are like any other files with few special properties so that only system can write it. They provide
    mappings from directories to files.
  - Special files: I/O devices are associated with at least 1 such file. They are read/written to just like ordinary
    file but result in activation of associated device.
  - Supports mounting
  - Supports access control
  - No difference between random or sequential IO
  - File API - create, open, read, write, seek
  - No effort to support concurrency because they were deemed to be unnecessary and insufficient.
  - Implemented using inodes which contains metadata and pointer to block of data
- Processes and Images
  - fork, pipe, execute, exit
- Shell
- Designed mostly for interactive use case but it also works for batch.
** RISC vs CISC
- https://www.youtube.com/watch?v=o14ecAoGN8w&list=PLOuhQnxVenf1AI66Ji4K_4I-ItmVLQKym&index=11
- https://doi.org/10.1145/641914.641917
- Cost of total computer system when using RISC vs CISC. Is the cost of complex instruction set worth it?
- Reasons for complexity
  - Speed of memory vs speed of CPU: CPU was 10 times faster than memory back then, loading too many instructions took
    time so single complex instruction made sense.
  - Microprogramming: Taking common subroutine and putting in instruction set itself e.g. polynomial evaluation, string
    manipulation, etc.
  - Code density: since memory was slower, the idea was to make code size smaller by using complex instruction set.
  - Marketing: People pay for complex things although the overall cost was much higher. complexity vs cost-effectiveness.
  - Upward compatibility: Manufacturers never removed unused or old instructions. Competitor pressure.
  - Support for high level language: It was hoped that complex instruction would support high level langugage better but
    they didn't.
- Is the complexity being used?
  - Not really. Clever assembly language programmers used it but as high level languages started being widely used,
    compiler writers started relying on simple instructions, compilers couldn't use complex instructions easily.
- Consequences Of CISC Implementations
  - Faster memory: Memory got cheaper and faster over time. Cache memory and pareto principle meant that overall memory
    subsystem was able to keep up with CPU.
  - Irrational Implementations: It turned out that CISC implementations were sometimes not really faster than
    implementations using sequence of RISC instructions.
  - Lengthned Design Time: It takes longer to design a CISC computer.
  - Increasd Design Errors: Complexity leads to errors.
  - Speed: RISC performs better because of its simplicity.
  - Better use of CHIP area: Saved area can be used for caches, faster transistors or even extra pipelining.
- Conclusion
  - Think about the whole system and its cost effectiveness.
  - Special case of end-to-end argument in system design.
  - Today energy consumption is another criteria in favor of RISC.
** 
* The Power Of Epidemics
** Definition of Scalable
- If we increase the resources in a system it results in increased performance proportional to the resources added.
- If adding resources to improve reliability through redundancy it should not adversely impact the performance.
** Scalability of Real Systems
- All the costs involed in running and maintaining have to << O(n)
- With good distribution of efforts resource usage of individual components should shrink.
** Systems That Dont Scale
*** Many algorithms run some form of agreement under the hoods
- in usual 2PC style, network load of agreement goes up O(n)
- memory and CPU load on coordinator also goes up O(n)
- you can call 2PC the unavailability protocol.
- it is probabilistically guranteed to block especially when things dont go as planned
- you build systems for a perfect world, things dont go as planned.
- but shit happens, and it happens continuously in real life.
- you can control this when systems are small but can't when systems grow.
*** Failure and recovery rates go up O(n)
*** They dont deal very well with continuous change
- Never expect your system to be stable
- Assume that nodes are continuously leaving, joining, failing
- Assume that perturbations and disruptions happen frequently
** Issues in Reliable Multicast Protocol
- even if just 1 node sleeps (not even go down), the throughput goes down rapidly with the number of nodes in the system.
** Control
- Control requires determinism to be effective
- We apply a top-down approach in controlling
- which results in increased complexity
- Only small isolated systems can be built out of tricks
- If system grows, you lose control
- We try to build systems that attempt to beat life
- To a certain extent, we succeed
** Real Life Is Not A State Machine
- it is not deterministic
- it is probabilistic
** So, let go off above illusion
** Is there, hope?
*** Probabilistic approaches
- Relax guarantees for scalable operation
*** Adaptive approaches
- Extensible, self-confugurable, self-tunable systems.
*** Formal verification approaches
- Assuring the integrity of decentralized systems.
** Robustnesss In Biological Systems
- Redundancy, Feedback, Modularity, Loose Coupling, Purging, Apoptosis, Spatial Compartmentalization, Distributed
  Processing, Extended Phenotype.
- Therefore, learn from real life.
** Historical context
- Gossips and Telephones paper, 1972 Discrete Mathematics journal
- Epidemics and gossip can be used intechangebly
** Robust Distributed Systems Based On Epidemics
- Has rigorous mathematical underpinings
- Probabilistic model
- Asychronous communication pattern
- Autonomous and decentralized actions
- Robust with respect to message loss and node failure
- Very tight control over resource usage
** Basic intution
- Periodically a participant will choose a random subset of destinations and will exchange its state with them.
- If a participant receives a remote state, it performs a merge operation with its local state.
- It a node's local state has not changed for a certain period it will stop communicating.
** Epidemic layering
*** Epidemic algorithms
- How to select the communicating partners
- When to terminate
*** Epidemic protocols
- What to do when a message is received
- Anti-entropy, rumor-mongering
** Spread of a simple epidemic
*** Assumptions
- Assume a fixed population of size n
- For now, assume homogeneous spreading
  - anyone can infect anyone else with equal probability
- Assume k members already infected
- Assume infection occurs in rounds
** Werner's Page
- internal.amazon.com/~wener/epidemics
* How to Speak by Patrick Winston
- https://www.youtube.com/watch?v=Unzc731iCUY
- Soldiers dont go to war without weapons, you shouldn't go out in society without knowing how to speak.
- Qualilty of communication = f(Knowledge of what you know, Practice with your knowledge, Talent) in that order, talent
  matters the least. e.g. Olympic gymnast vs the professor in skiiing.
- Understand that people have only one langugage processor.
** How to start a talk?
*** not a joke, at least not at the beginning.
*** start with a promise. tell them what they will learn to get them excited.
*** e.g. at the end of this 60 minutes you will know how to communicate.
** Sample/Heuristics
*** cycle on the subject. multiple time if need be.
*** build a fense around your talk's idea so that it cant be confused with other ideas in the listener's mind.
*** use verbal punctuation.
*** tell stories and include examples.
*** ask questions. choose question carefully, not too hard, not too easy.
** Time and Place
*** 11 AM
*** Well lit palce.
*** cased. survery your speaking place before the talk.
*** should be well populated. at least more than half-full.
** Tools
*** There should be a white board. Graphic quality.
*** Speed. Slides are too fast. Board is not. Listener can cycle back.
*** Target. Use your hands. Point, wave, write etc.
*** Props
**** playwriters do it very well.
**** professor. walter lewin. for the love of physics.
**** people get involved with props and anticipate whats going to happen. even for something as simple as writing.
**** avoid slides as much as possible. they expose you to ideas not teach you.
**** Slides if you have to
***** least number of words. dont let them read.
***** keep images simple.
***** remove all clutter. background, title
**** dont use pointers. laser or stick or anything else.
** Information Talk
*** Promise
*** Inspire
**** you should be passionate
*** How to think
**** tell stories that audience should know
**** tell them about questions they should ask
**** tell them mecahnisms for analysing those stories
**** tell them ways of putting stories together
**** tell them how to evaluate how reliable the story is
** Persuading
*** understand the nature of human intelligence
**** we are symbolic creatures
**** we can string together things
**** we can tell stories about it
*** Job talks, job interviews, technical talk.
**** your vision. (within first 5 mins)
**** you should have done something. (within first 5 mins)
**** the series of steps to achieve your vision
**** your contributions.
*** getting famous
**** you want people to remember you and your ideas
**** why?
***** should you care about getting famous?
****** it isn't fun getting ignored
****** you dont want your ideas to go unnoticed. like you wouldn't want your children to go out in the world in rags.
**** how? (star method)
***** have a symbol (arch)
***** have a slogan (one shot learning)
***** surprise
***** salient idea. doesnt mean important but an idea that sticks out.
***** tell a story
** How to stop?
*** final slide
**** dont list collaborators. if you do, make sure your contributions are highlighted. put your collaborators on the
first slide if you want to recognize them.
**** dont use the "questions?" slide. it stays there for 20 mins. you wasted real estate there which could have been
about you or the topic.
**** dont use the URL slide. has anyone noted it down ever? there are other ways to do it.
**** dont use "the end" slide. it is waste of time and real estate. it could have been about you or the topic.
**** dont use conclusion slide.
**** your final slide should be "Contrinbutions". Tell them what you have done.
*** final words
**** tell a joke. if it ends well, all is well.
**** dont say thank you.
**** there are other things you can do.
**** salute the audience. make it about them.

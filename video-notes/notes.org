#+TITLE: Notes On Tech Videos I Have watched
#+STARTUP: indent
#+OPTIONS: ^:nil
[[./notes.html][HTML Export]]


* Read a Paper Series
** End To End Argument In System Design			      :system_design:
   - https://www.youtube.com/watch?v=dE699lHDW7I&t=1s
   - https://dl.acm.org/citation.cfm?doid=357401.357402
   - Presents a design principle that guides placement of functions among modules of a distributed computer system.
   - Functions placed at lower level of system may be of little value compared to the cost of providing them.
   - Functions should be placed at ends of the system.
   - e.g. for a file transfer system, ensuring correctness in each module vs ensuring correctness at the ends by taking
    hash and comparing them. With the former there is a chance of error even if individual modules guanrantee 99.9%
    correctness; whereas, in the later there is no chance of error.
** Creteria For Decomposing Systems In Modules :system_design:software_engineering:
   - https://www.youtube.com/watch?v=NF5tRQb0Dpc
   - https://dl.acm.org/citation.cfm?doid=361598.361623
   - Follow data abstraction and information hiding principle in design.
   - Decomposition of a system into modules based on flow chart of implementation for application is always an incorrect
     choice.
   - Decomposition should be based on the design decisions that are likely to change. Each module is then designed to
     hide such a design decision from others.
   - Since design decisions transcend the time of execution, modules will not correspond to steps in processing.
* The Power Of Epidemics
** Definition of Scalable
- If we increase the resources in a system it results in increased performance proportional to the resources added.
- If adding resources to improve reliability through redundancy it should not adversely impact the performance.
** Scalability of Real Systems
- All the costs involed in running and maintaining have to << O(n)
- With good distribution of efforts resource usage of individual components should shrink.
** Systems That Dont Scale
*** Many algorithms run some form of agreement under the hoods
- in usual 2PC style, network load of agreement goes up O(n)
- memory and CPU load on coordinator also goes up O(n)
- you can call 2PC the unavailability protocol.
- it is probabilistically guranteed to block especially when things dont go as planned
- you build systems for a perfect world, things dont go as planned.
- but shit happens, and it happens continuously in real life.
- you can control this when systems are small but can't when systems grow.
*** Failure and recovery rates go up O(n)
*** They dont deal very well with continuous change
- Never expect your system to be stable
- Assume that nodes are continuously leaving, joining, failing
- Assume that perturbations and disruptions happen frequently
** Issues in Reliable Multicast Protocol
- even if just 1 node sleeps (not even go down), the throughput goes down rapidly with the number of nodes in the system.
** Control
- Control requires determinism to be effective
- We apply a top-down approach in controlling
- which results in increased complexity
- Only small isolated systems can be built out of tricks
- If system grows, you lose control
- We try to build systems that attempt to beat life
- To a certain extent, we succeed
** Real Life Is Not A State Machine
- it is not deterministic
- it is probabilistic
** So, let go off above illusion
** Is there, hope?
*** Probabilistic approaches
- Relax guarantees for scalable operation
*** Adaptive approaches
- Extensible, self-confugurable, self-tunable systems.
*** Formal verification approaches
- Assuring the integrity of decentralized systems.
** Robustnesss In Biological Systems
- Redundancy, Feedback, Modularity, Loose Coupling, Purging, Apoptosis, Spatial Compartmentalization, Distributed
  Processing, Extended Phenotype.
- Therefore, learn from real life.
** Historical context
- Gossips and Telephones paper, 1972 Discrete Mathematics journal
- Epidemics and gossip can be used intechangebly
** Robust Distributed Systems Based On Epidemics
- Has rigorous mathematical underpinings
- Probabilistic model
- Asychronous communication pattern
- Autonomous and decentralized actions
- Robust with respect to message loss and node failure
- Very tight control over resource usage
** Basic intution
- Periodically a participant will choose a random subset of destinations and will exchange its state with them.
- If a participant receives a remote state, it performs a merge operation with its local state.
- It a node's local state has not changed for a certain period it will stop communicating.
** Epidemic layering
*** Epidemic algorithms
- How to select the communicating partners
- When to terminate
*** Epidemic protocols
- What to do when a message is received
- Anti-entropy, rumor-mongering
** Spread of a simple epidemic
*** Assumptions
- Assume a fixed population of size n
- For now, assume homogeneous spreading
  - anyone can infect anyone else with equal probability
- Assume k members already infected
- Assume infection occurs in rounds
** Werner's Page
- internal.amazon.com/~wener/epidemics
* How to Speak by Patrick Winston
- https://www.youtube.com/watch?v=Unzc731iCUY
- Soldiers dont go to war without weapons, you shouldn't go out in society without knowing how to speak.
- Qualilty of communication = f(Knowledge of what you know, Practice with your knowledge, Talent) in that order, talent
  matters the least. e.g. Olympic gymnast vs the professor in skiiing.
- Understand that people have only one langugage processor.
** How to start a talk?
*** not a joke, at least not at the beginning.
*** start with a promise. tell them what they will learn to get them excited.
*** e.g. at the end of this 60 minutes you will know how to communicate.
** Sample/Heuristics
*** cycle on the subject. multiple time if need be.
*** build a fense around your talk's idea so that it cant be confused with other ideas in the listener's mind.
*** use verbal punctuation.
*** tell stories and include examples.
*** ask questions. choose question carefully, not too hard, not too easy.
** Time and Place
*** 11 AM
*** Well lit palce.
*** cased. survery your speaking place before the talk.
*** should be well populated. at least more than half-full.
** Tools
*** There should be a white board. Graphic quality.
*** Speed. Slides are too fast. Board is not. Listener can cycle back.
*** Target. Use your hands. Point, wave, write etc.
*** Props
**** playwriters do it very well.
**** professor. walter lewin. for the love of physics.
**** people get involved with props and anticipate whats going to happen. even for something as simple as writing.
**** avoid slides as much as possible. they expose you to ideas not teach you.
**** Slides if you have to
***** least number of words. dont let them read.
***** keep images simple.
***** remove all clutter. background, title
**** dont use pointers. laser or stick or anything else.
** Information Talk
*** Promise
*** Inspire
**** you should be passionate
*** How to think
**** tell stories that audience should know
**** tell them about questions they should ask
**** tell them mecahnisms for analysing those stories
**** tell them ways of putting stories together
**** tell them how to evaluate how reliable the story is
** Persuading
*** understand the nature of human intelligence
**** we are symbolic creatures
**** we can string together things
**** we can tell stories about it
*** Job talks, job interviews, technical talk.
**** your vision. (within first 5 mins)
**** you should have done something. (within first 5 mins)
**** the series of steps to achieve your vision
**** your contributions.
*** getting famous
**** you want people to remember you and your ideas
**** why?
***** should you care about getting famous?
****** it isn't fun getting ignored
****** you dont want your ideas to go unnoticed. like you wouldn't want your children to go out in the world in rags.
**** how? (star method)
***** have a symbol (arch)
***** have a slogan (one shot learning)
***** surprise
***** salient idea. doesnt mean important but an idea that sticks out.
***** tell a story
** How to stop?
*** final slide
**** dont list collaborators. if you do, make sure your contributions are highlighted. put your collaborators on the
first slide if you want to recognize them.
**** dont use the "questions?" slide. it stays there for 20 mins. you wasted real estate there which could have been
about you or the topic.
**** dont use the URL slide. has anyone noted it down ever? there are other ways to do it.
**** dont use "the end" slide. it is waste of time and real estate. it could have been about you or the topic.
**** dont use conclusion slide.
**** your final slide should be "Contrinbutions". Tell them what you have done.
*** final words
**** tell a joke. if it ends well, all is well.
**** dont say thank you.
**** there are other things you can do.
**** salute the audience. make it about them.
